"use client";
import React, { useState, useEffect, useRef } from "react";
import LandingPageTemplate from "./LandingPageTemplate";

interface PageEditorProps {
  initialConfig: any; // Should contain page_content, page_style, template_id, id (if editing)
  onSave?: (config: any) => void;
}

export default function PageEditor({ initialConfig, onSave }: PageEditorProps) {
  // Split initial config into content, style, template, id
  const {
    page_content: initialContent = {
      business: { name: '', logo: '' },
      hero: { headline: '', headlineHighlights: [], subheadline: '', cta: '', heroTag: '', heroTagIcon: '' },
      // Problem Amplification Section
      problemSection: {
        title: '',
        subtitle: '',
        painPoints: []
      },
      // Solution Preview Section (NESB Framework)
      solutionSection: {
        title: '',
        subtitle: '',
        benefits: []
      },
      // Social Proof Section
      socialProof: {
        title: '',
        subtitle: '',
        testimonials: [],
        stats: []
      },
      features: [],
      featuresTitle: '',
      featuresSubtitle: '',
      // Risk Reversal Section
      guarantees: {
        title: '',
        subtitle: '',
        guarantees: []
      },
      // FAQ Section
      faq: {
        title: '',
        subtitle: '',
        questions: []
      },
      ctaTitle: '',
      ctaSubtitle: '',
      // Urgency/Scarcity elements
      urgency: {
        enabled: false,
        message: '',
        deadline: ''
      },
    },
    page_style: initialStyle = {},
    template_id: initialTemplateId = 'default',
    id: initialId = undefined,
    original_prompt: initialOriginalPrompt = "",
  } = initialConfig || {};

  // Handle legacy themeColors structure
  const legacyTheme = initialStyle?.themeColors ? {
    mode: 'white',
    accentColor: initialStyle.themeColors.accentColor || initialStyle.themeColors.primaryColor || '#6366f1',
  } : {
    mode: 'white',
    accentColor: '#6366f1',
  };

  const processedInitialStyle = {
    theme: initialStyle?.theme || legacyTheme,
  };

  const [pageContent, setPageContent] = useState<any>(initialContent);
  const [pageStyle, setPageStyle] = useState<any>(processedInitialStyle);
  const [templateId, setTemplateId] = useState<string>(initialTemplateId);
  const [id, setId] = useState<string | undefined>(initialId);
  const [saving, setSaving] = useState(false);
  const [originalPrompt, setOriginalPrompt] = useState<string>(initialOriginalPrompt);
  const [published, setPublished] = useState(false);
  const [error, setError] = useState("");
  const [sidePanelCollapsed, setSidePanelCollapsed] = useState(false);
  const [previewMode, setPreviewMode] = useState<'desktop' | 'mobile'>('desktop');
  const [showSidePanel, setShowSidePanel] = useState(false); // For mobile
  const [regenerating, setRegenerating] = useState(false);
  const [showErrorToast, setShowErrorToast] = useState(false);

  // Section expansion state - default: Business Info and Hero sections open, others collapsed
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    business: true,
    hero: true,
    pageHeadings: false,
    features: false,
    problemSection: false,
    solutionSection: false,
    socialProof: false,
    guarantees: false,
    faq: false,
    urgency: false,
    theme: false,
  });

  // Toggle section expansion
  const toggleSection = (sectionName: string) => {
    setExpandedSections(prev => ({
      ...prev,
      [sectionName]: !prev[sectionName]
    }));
  };

  // Function to resize textarea to fit content
  const resizeTextarea = (element: HTMLTextAreaElement) => {
    element.style.height = 'auto';
    element.style.height = element.scrollHeight + 'px';
  };

  // Resize all textareas on initial load
  useEffect(() => {
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
      resizeTextarea(textarea);
    });
  }, [pageContent, pageStyle]); // Re-run when content changes

  // Inline editing handlers
  const handleBusinessChange = (field: string, value: string) => {
    setPageContent((prev: any) => ({
      ...prev,
      business: { ...prev.business, [field]: value },
    }));
  };
  
  const handleHeroChange = (field: string, value: string) => {
    setPageContent((prev: any) => ({
      ...prev,
      hero: { ...prev.hero, [field]: value },
    }));
  };

  const handleHighlightToggle = (word: string) => {
    setPageContent((prev: any) => {
      const currentHighlights = prev.hero.headlineHighlights || [];
      const normalizedWord = word.trim();
      const normalizedHighlights = currentHighlights.map((h: string) => h.trim());
      
      let newHighlights;
      if (normalizedHighlights.includes(normalizedWord)) {
        newHighlights = normalizedHighlights.filter((h: string) => h !== normalizedWord);
      } else {
        newHighlights = [...normalizedHighlights, normalizedWord];
      }
      
      return {
        ...prev,
        hero: { ...prev.hero, headlineHighlights: newHighlights },
      };
    });
  };
  
  const handlePageContentChange = (field: string, value: string) => {
    setPageContent((prev: any) => ({
      ...prev,
      [field]: value,
    }));
  };
  const handleFeatureChange = (idx: number, value: any) => {
    setPageContent((prev: any) => {
      const features = [...prev.features];
      features[idx] = value;
      return { ...prev, features };
    });
  };
  const handleThemeChange = (field: string, value: string) => {
    setPageStyle((prev: any) => ({
      ...prev,
      theme: { ...prev.theme, [field]: value },
    }));
  };
  const handleAddFeature = () => {
    setPageContent((prev: any) => ({
      ...prev,
      features: [...prev.features, { title: "New Feature", description: "" }],
    }));
  };
  const handleRemoveFeature = (idx: number) => {
    setPageContent((prev: any) => {
      const features = prev.features.filter((_: any, i: number) => i !== idx);
      return { ...prev, features };
    });
  };

  // New section handlers
  const handleProblemSectionChange = (field: string, value: any) => {
    setPageContent((prev: any) => ({
      ...prev,
      problemSection: { ...prev.problemSection, [field]: value },
    }));
  };

  const handleSolutionSectionChange = (field: string, value: any) => {
    setPageContent((prev: any) => ({
      ...prev,
      solutionSection: { ...prev.solutionSection, [field]: value },
    }));
  };

  const handleSocialProofChange = (field: string, value: any) => {
    setPageContent((prev: any) => ({
      ...prev,
      socialProof: { ...prev.socialProof, [field]: value },
    }));
  };

  const handleGuaranteesChange = (field: string, value: any) => {
    setPageContent((prev: any) => ({
      ...prev,
      guarantees: { ...prev.guarantees, [field]: value },
    }));
  };

  const handleFAQChange = (field: string, value: any) => {
    setPageContent((prev: any) => ({
      ...prev,
      faq: { ...prev.faq, [field]: value },
    }));
  };

  const handleUrgencyChange = (field: string, value: any) => {
    setPageContent((prev: any) => ({
      ...prev,
      urgency: { ...prev.urgency, [field]: value },
    }));
  };

  // Array handlers for new sections
  const handlePainPointsChange = (idx: number, value: any) => {
    setPageContent((prev: any) => {
      const painPoints = [...(prev.problemSection?.painPoints || [])];
      painPoints[idx] = value;
      return { 
        ...prev, 
        problemSection: { ...prev.problemSection, painPoints } 
      };
    });
  };

  const handleBenefitsChange = (idx: number, value: any) => {
    setPageContent((prev: any) => {
      const benefits = [...(prev.solutionSection?.benefits || [])];
      benefits[idx] = value;
      return { 
        ...prev, 
        solutionSection: { ...prev.solutionSection, benefits } 
      };
    });
  };

  const handleTestimonialsChange = (idx: number, value: any) => {
    setPageContent((prev: any) => {
      const testimonials = [...(prev.socialProof?.testimonials || [])];
      testimonials[idx] = value;
      return { 
        ...prev, 
        socialProof: { ...prev.socialProof, testimonials } 
      };
    });
  };

  const handleStatsChange = (idx: number, value: any) => {
    setPageContent((prev: any) => {
      const stats = [...(prev.socialProof?.stats || [])];
      stats[idx] = value;
      return { 
        ...prev, 
        socialProof: { ...prev.socialProof, stats } 
      };
    });
  };

  const handleGuaranteesArrayChange = (idx: number, value: any) => {
    setPageContent((prev: any) => {
      const guarantees = [...(prev.guarantees?.guarantees || [])];
      guarantees[idx] = value;
      return { 
        ...prev, 
        guarantees: { ...prev.guarantees, guarantees } 
      };
    });
  };

  const handleQuestionsChange = (idx: number, value: any) => {
    setPageContent((prev: any) => {
      const questions = [...(prev.faq?.questions || [])];
      questions[idx] = value;
      return { 
        ...prev, 
        faq: { ...prev.faq, questions } 
      };
    });
  };

  // Add/Remove handlers for new sections
  const handleAddPainPoint = () => {
    setPageContent((prev: any) => ({
      ...prev,
      problemSection: {
        ...prev.problemSection,
        painPoints: [...(prev.problemSection?.painPoints || []), { text: '', icon: '' }]
      }
    }));
  };

  const handleAddBenefit = () => {
    setPageContent((prev: any) => ({
      ...prev,
      solutionSection: {
        ...prev.solutionSection,
        benefits: [...(prev.solutionSection?.benefits || []), { title: '', description: '', icon: '', type: 'new' }]
      }
    }));
  };

  const handleAddTestimonial = () => {
    setPageContent((prev: any) => ({
      ...prev,
      socialProof: {
        ...prev.socialProof,
        testimonials: [...(prev.socialProof?.testimonials || []), { name: '', role: '', company: '', quote: '', rating: 5, result: '' }]
      }
    }));
  };

  const handleAddStat = () => {
    setPageContent((prev: any) => ({
      ...prev,
      socialProof: {
        ...prev.socialProof,
        stats: [...(prev.socialProof?.stats || []), { number: '', label: '', description: '' }]
      }
    }));
  };

  const handleAddGuarantee = () => {
    setPageContent((prev: any) => ({
      ...prev,
      guarantees: {
        ...prev.guarantees,
        guarantees: [...(prev.guarantees?.guarantees || []), { title: '', description: '', icon: '' }]
      }
    }));
  };

  const handleAddQuestion = () => {
    setPageContent((prev: any) => ({
      ...prev,
      faq: {
        ...prev.faq,
        questions: [...(prev.faq?.questions || []), { question: '', answer: '' }]
      }
    }));
  };

  const handleRemovePainPoint = (idx: number) => {
    setPageContent((prev: any) => {
      const painPoints = (prev.problemSection?.painPoints || []).filter((_: any, i: number) => i !== idx);
      return { 
        ...prev, 
        problemSection: { ...prev.problemSection, painPoints } 
      };
    });
  };

  const handleRemoveBenefit = (idx: number) => {
    setPageContent((prev: any) => {
      const benefits = (prev.solutionSection?.benefits || []).filter((_: any, i: number) => i !== idx);
      return { 
        ...prev, 
        solutionSection: { ...prev.solutionSection, benefits } 
      };
    });
  };

  const handleRemoveTestimonial = (idx: number) => {
    setPageContent((prev: any) => {
      const testimonials = (prev.socialProof?.testimonials || []).filter((_: any, i: number) => i !== idx);
      return { 
        ...prev, 
        socialProof: { ...prev.socialProof, testimonials } 
      };
    });
  };

  const handleRemoveStat = (idx: number) => {
    setPageContent((prev: any) => {
      const stats = (prev.socialProof?.stats || []).filter((_: any, i: number) => i !== idx);
      return { 
        ...prev, 
        socialProof: { ...prev.socialProof, stats } 
      };
    });
  };

  const handleRemoveGuarantee = (idx: number) => {
    setPageContent((prev: any) => {
      const guarantees = (prev.guarantees?.guarantees || []).filter((_: any, i: number) => i !== idx);
      return { 
        ...prev, 
        guarantees: { ...prev.guarantees, guarantees } 
      };
    });
  };

  const handleRemoveQuestion = (idx: number) => {
    setPageContent((prev: any) => {
      const questions = (prev.faq?.questions || []).filter((_: any, i: number) => i !== idx);
      return { 
        ...prev, 
        faq: { ...prev.faq, questions } 
      };
    });
  };

  // Save and publish handlers
  const handleSave = async () => {
    setSaving(true);
    setError("");
    try {
      const res = await fetch("/api/landing-pages", {
        method: id ? "PATCH" : "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "same-origin",
        body: JSON.stringify({
          id,
          template_id: templateId,
          page_content: pageContent,
          page_style: pageStyle,
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || "Failed to save");
      if (onSave) onSave({ id: data.page.id, template_id: templateId, page_content: pageContent, page_style: pageStyle });
      setId(data.page.id); // Update id if new page
      setPublished(false);
    } catch (e: any) {
      setError(e.message || "Failed to save");
    } finally {
      setSaving(false);
    }
  };
  const handlePublish = async () => {
    setSaving(true);
    setError("");
    try {
      const res = await fetch("/api/landing-pages", {
        method: id ? "PATCH" : "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "same-origin",
        body: JSON.stringify({
          id,
          template_id: templateId,
          page_content: pageContent,
          page_style: pageStyle,
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || "Failed to publish");
      setId(data.page.id);
      setPublished(true);
    } catch (e: any) {
      setError(e.message || "Failed to publish");
    } finally {
      setSaving(false);
    }
  };

  const handleRegenerate = async () => {
    setRegenerating(true);
    setError("");
    try {
      console.log("Starting regeneration...");
      
      // Create a context-aware prompt based on current content
      const currentContent = {
        hero: pageContent.hero,
        features: pageContent.features,
        theme: pageStyle.theme
      };
      
      const prompt = `Improve and enhance this existing landing page content while staying true to the original concept and purpose. Make it more compelling, professional, and conversion-focused.

ORIGINAL CONCEPT: "${originalPrompt || 'No original prompt available'}"

Current Hero:
- Headline: "${pageContent.hero.headline}"
- Subheadline: "${pageContent.hero.subheadline}"
- CTA: "${pageContent.hero.cta}"

Current Features: ${pageContent.features.map((f: any) => `- ${f.title}: ${f.description}`).join('\n')}

Please generate improved versions of these elements with better copy, more compelling headlines, and enhanced feature descriptions while maintaining the same business focus and staying true to the original concept: "${originalPrompt || 'No original prompt available'}".`;
      
      const res = await fetch("/api/generate-page", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "same-origin",
        body: JSON.stringify({
          prompt: prompt,
        }),
      });
      
      console.log("Response status:", res.status);
      const data = await res.json();
      console.log("Response data:", data);
      
      if (!res.ok) throw new Error(data.error || "Failed to regenerate");
      
      // Update the page content with the regenerated content
      if (data.config) {
        console.log("Config received:", data.config);
        
        // Only update if we have valid data
        if (data.config.hero && data.config.hero.headline) {
          console.log("Hero data from AI:", data.config.hero);
          console.log("Current hero data:", pageContent.hero);
          
          const newPageContent = {
            business: {
              ...pageContent.business, // Keep existing business data
              ...data.config.business, // Override with new AI data
            },
            hero: {
              ...pageContent.hero, // Keep existing hero data
              ...data.config.hero, // Override with new AI data
            },
            // New sections
            problemSection: data.config.problemSection || pageContent.problemSection,
            solutionSection: data.config.solutionSection || pageContent.solutionSection,
            socialProof: data.config.socialProof || pageContent.socialProof,
            features: data.config.features || [],
            featuresTitle: data.config.featuresTitle || '',
            featuresSubtitle: data.config.featuresSubtitle || '',
            guarantees: data.config.guarantees || pageContent.guarantees,
            faq: data.config.faq || pageContent.faq,
            ctaTitle: data.config.ctaTitle || '',
            ctaSubtitle: data.config.ctaSubtitle || '',
            urgency: data.config.urgency || pageContent.urgency,
          };
          
          console.log("AI config sections:", {
            problemSection: data.config.problemSection,
            solutionSection: data.config.solutionSection,
            socialProof: data.config.socialProof,
            guarantees: data.config.guarantees,
            faq: data.config.faq,
          });
          
          console.log("Merged page content sections:", {
            problemSection: newPageContent.problemSection,
            solutionSection: newPageContent.solutionSection,
            socialProof: newPageContent.socialProof,
            guarantees: newPageContent.guarantees,
            faq: newPageContent.faq,
          });
          setPageContent(newPageContent);
          console.log("Updated page content:", newPageContent);
          console.log("Final hero data after merge:", newPageContent.hero);
        }
        
        if (data.config.theme) {
          const newPageStyle = {
            theme: data.config.theme,
          };
          setPageStyle(newPageStyle);
          console.log("Updated page style:", newPageStyle);
        }
      } else {
        console.log("No config in response");
        setError("No configuration data received from regeneration");
      }
      
    } catch (e: any) {
      console.error("Regeneration error:", e);
      setError(e.message || "Failed to regenerate landing page");
      setShowErrorToast(true);
    } finally {
      setRegenerating(false);
    }
  };

  // Clear error toast when user starts regenerating
  useEffect(() => {
    if (regenerating) {
      setShowErrorToast(false);
    }
  }, [regenerating]);

  return (
    <div className="flex h-full bg-slate-50 overflow-hidden">
      {/* Main Preview Area */}
      <div 
        className={`flex-1 relative transition-all duration-300`}
        style={{
          marginRight: sidePanelCollapsed ? '0px' : '320px'
        }}
      >
        {/* Preview Controls - Fixed Header */}
        <div 
          className="absolute top-0 left-0 right-0 bg-white border-b border-slate-200 px-3 sm:px-6 py-3 flex flex-col sm:flex-row sm:items-center justify-between z-20 gap-3"
          style={{
            paddingRight: sidePanelCollapsed ? '80px' : '24px'
          }}
        >
          <div className="flex items-center gap-2 sm:gap-4">
            <h1 className="text-base sm:text-lg font-semibold text-slate-800">Landing Page Preview</h1>
            <div className="flex items-center gap-1 sm:gap-2 bg-slate-100 rounded-lg p-1">
              <button
                onClick={() => setPreviewMode('desktop')}
                className={`px-2 sm:px-3 py-1 rounded text-xs sm:text-sm font-medium transition-colors ${
                  previewMode === 'desktop' 
                    ? 'bg-white text-slate-800 shadow-sm' 
                    : 'text-slate-600 hover:text-slate-800'
                }`}
              >
                Desktop
              </button>
              <button
                onClick={() => setPreviewMode('mobile')}
                className={`px-2 sm:px-3 py-1 rounded text-xs sm:text-sm font-medium transition-colors ${
                  previewMode === 'mobile' 
                    ? 'bg-white text-slate-800 shadow-sm' 
                    : 'text-slate-600 hover:text-slate-800'
                }`}
              >
                Mobile
              </button>
            </div>
          </div>
          <div className="flex flex-col items-end gap-2 sm:gap-3 min-w-[180px]">
            <div className="flex items-center gap-2 sm:gap-3">
              <button
                className="bg-blue-600 text-white px-3 sm:px-4 py-2 rounded-lg font-medium hover:bg-blue-700 transition-colors text-xs sm:text-sm"
                onClick={() => {
                  // Save current state first, then open preview
                  handleSave().then(() => {
                    if (id) {
                      window.open(`/page/${initialConfig.slug}`, '_blank');
                    }
                  });
                }}
                disabled={saving}
              >
                Preview
              </button>
              <button
                className="bg-orange-600 text-white px-3 sm:px-4 py-2 rounded-lg font-medium hover:bg-orange-700 transition-colors disabled:opacity-60 text-xs sm:text-sm"
                onClick={handleRegenerate}
                disabled={regenerating || saving}
              >
                {regenerating ? "Regenerating..." : "Regenerate"}
              </button>
              <button
                className="bg-purple-600 text-white px-3 sm:px-4 py-2 rounded-lg font-medium hover:bg-purple-700 transition-colors disabled:opacity-60 text-xs sm:text-sm"
                onClick={handleSave}
                disabled={saving}
              >
                {saving ? "Saving..." : "Save"}
              </button>
              <button
                className="bg-green-600 text-white px-3 sm:px-4 py-2 rounded-lg font-medium hover:bg-green-700 transition-colors disabled:opacity-60 text-xs sm:text-sm"
                onClick={handlePublish}
                disabled={saving}
              >
                {published ? "Published!" : "Publish"}
              </button>
              {/* Mobile Edit Button */}
              <button
                className="lg:hidden bg-slate-600 text-white px-3 py-2 rounded-lg font-medium hover:bg-slate-700 transition-colors text-xs sm:text-sm"
                onClick={() => setShowSidePanel(!showSidePanel)}
              >
                Edit
              </button>
            </div>
            {/* Error message block below Regenerate button */}
            {showErrorToast && (
              <div className="w-full mt-2 relative">
                {/* Triangle pointer pointing up to Regenerate button */}
                <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-b-4 border-transparent border-b-red-600"></div>
                <div className="bg-red-600 text-white px-4 py-3 rounded-lg shadow flex items-start gap-3 relative">
                  <div className="flex-1">
                    <div className="font-semibold text-base mb-1">Ops, there was an error. Try one more time!</div>
                    <div className="text-sm mb-1">Please try regenerating 2-3 more times.</div>
                    <div className="text-xs opacity-80 mt-1">We are currently in beta. Sorry for the inconvenience!</div>
                  </div>
                  <button
                    className="ml-2 text-white/80 hover:text-white text-lg font-bold px-1 absolute top-2 right-2"
                    onClick={() => setShowErrorToast(false)}
                    aria-label="Close error notification"
                  >
                    ×
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Preview Container - Scrollable Content */}
        <div className="absolute top-0 left-0 right-0 bottom-0 overflow-auto bg-slate-100 pt-20 sm:pt-20 px-3 sm:px-6 pb-6">
          <div className={`mx-auto transition-all duration-300 ${
            previewMode === 'mobile' ? 'max-w-sm' : 'max-w-4xl'
          }`}>
            <div className={`bg-white shadow-lg rounded-lg overflow-hidden ${
              previewMode === 'mobile' ? 'border-8 border-slate-800 rounded-3xl' : ''
            }`}>
              <LandingPageTemplate 
                config={{ ...pageContent, theme: pageStyle.theme }} 
                pageId={id} 
                previewMode={previewMode}
              />
            </div>
          </div>
        </div>
      </div>

      {/* Collapsible Side Panel - Desktop */}
      <aside className={`hidden lg:block fixed right-0 top-0 bg-white shadow-xl border-l border-slate-200 flex flex-col transition-all duration-300 z-30 ${
        sidePanelCollapsed ? 'w-16' : 'w-80'
      }`} style={{ top: '64px', height: 'calc(100vh - 64px)' }}>
        {/* Panel Header */}
        <div className="flex items-center gap-3 px-4 py-4 border-b border-slate-100 flex-shrink-0">
          <div className="w-8 h-8 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-lg flex items-center justify-center flex-shrink-0">
            <span className="text-white font-bold text-sm">✏️</span>
          </div>
          <span className={`font-semibold text-slate-800 transition-opacity duration-300 ${sidePanelCollapsed ? 'opacity-0 w-0 overflow-hidden' : ''}`}>
            Edit Page
          </span>
          <button
            onClick={() => setSidePanelCollapsed(!sidePanelCollapsed)}
            className={`p-1.5 rounded-lg hover:bg-slate-100 transition-colors ${sidePanelCollapsed ? 'hidden' : ''}`}
            title="Collapse editor"
          >
            <svg className="w-4 h-4 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>

        {/* Panel Content */}
        <div className={`overflow-y-auto ${sidePanelCollapsed ? 'hidden' : ''}`} style={{ 
          height: 'calc(100vh - 64px - 72px)', 
          minHeight: 0 
        }}>
          <div className="p-4 sm:p-6 space-y-6 pb-6">
            {/* Business Section */}
            <div className="border border-slate-200 rounded-lg overflow-hidden">
              <button
                onClick={() => toggleSection('business')}
                className="w-full px-4 py-3 bg-slate-50 hover:bg-slate-100 transition-colors flex items-center justify-between text-left"
              >
                <h3 className="text-base sm:text-lg font-semibold text-slate-800">Business Info</h3>
                <svg 
                  className={`w-5 h-5 text-slate-600 transition-transform duration-200 ${expandedSections.business ? 'rotate-180' : ''}`}
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              {expandedSections.business && (
                <div className="p-4 space-y-3">
                  <div>
                    <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Business Name</label>
                    <input
                      type="text"
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                      value={pageContent.business?.name || ''}
                      onChange={e => handleBusinessChange("name", e.target.value)}
                      placeholder="Enter your business name..."
                    />
                  </div>
                  <div>
                    <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Business Logo</label>
                    <input
                      type="text"
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                      value={pageContent.business?.logo || ''}
                      onChange={e => handleBusinessChange("logo", e.target.value)}
                      placeholder="Enter logo URL or upload image..."
                    />
                    <p className="text-xs text-slate-500 mt-1">
                      Enter a URL or upload an image. Leave empty to use default.
                    </p>
                  </div>
                </div>
              )}
            </div>

            {/* Hero Section */}
            <div className="border border-slate-200 rounded-lg overflow-hidden">
              <button
                onClick={() => toggleSection('hero')}
                className="w-full px-4 py-3 bg-slate-50 hover:bg-slate-100 transition-colors flex items-center justify-between text-left"
              >
                <h3 className="text-base sm:text-lg font-semibold text-slate-800">Hero Section</h3>
                <svg 
                  className={`w-5 h-5 text-slate-600 transition-transform duration-200 ${expandedSections.hero ? 'rotate-180' : ''}`}
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
                            {expandedSections.hero && (
                <div className="p-4 space-y-3">
                  <div>
                    <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Hero Tag</label>
                    <textarea
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                      value={pageContent.hero.heroTag || ''}
                      onChange={e => {
                        handleHeroChange("heroTag", e.target.value);
                        // Auto-resize
                        e.target.style.height = 'auto';
                        e.target.style.height = e.target.scrollHeight + 'px';
                      }}
                      onInput={e => {
                        // Auto-resize on input
                        const target = e.target as HTMLTextAreaElement;
                        target.style.height = 'auto';
                        target.style.height = target.scrollHeight + 'px';
                      }}
                      rows={1}
                      placeholder="AI-Powered Solution"
                    />
                  </div>
                  <div>
                    <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Hero Tag Icon</label>
                    <select
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                      value={pageContent.hero.heroTagIcon || ''}
                      onChange={e => handleHeroChange("heroTagIcon", e.target.value)}
                    >
                      <option value="">No Icon</option>
                      <option value="zap">⚡ Zap</option>
                      <option value="star">⭐ Star</option>
                      <option value="shield">🛡️ Shield</option>
                      <option value="rocket">🚀 Rocket</option>
                      <option value="target">🎯 Target</option>
                      <option value="trendingUp">📈 Trending Up</option>
                      <option value="award">🏆 Award</option>
                      <option value="sparkles">✨ Sparkles</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Headline</label>
                    <textarea
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                      value={pageContent.hero.headline}
                      onChange={e => {
                        handleHeroChange("headline", e.target.value);
                        // Auto-resize
                        e.target.style.height = 'auto';
                        e.target.style.height = e.target.scrollHeight + 'px';
                      }}
                      onInput={e => {
                        // Auto-resize on input
                        const target = e.target as HTMLTextAreaElement;
                        target.style.height = 'auto';
                        target.style.height = target.scrollHeight + 'px';
                      }}
                      rows={1}
                      placeholder="Enter your headline..."
                    />
                    
                    {/* Headline Highlights */}
                    {pageContent.hero.headline && (
                      <div className="mt-2">
                        <label className="block text-slate-600 font-medium mb-2 text-xs">Highlight Words</label>
                        <div className="flex flex-wrap gap-1">
                          {pageContent.hero.headline.split(' ').map((word: string, index: number) => {
                            const cleanWord = word.replace(/[^\w]/g, '');
                            const currentHighlights = pageContent.hero.headlineHighlights || [];
                            const isHighlighted = currentHighlights.some((h: string) => 
                              h.toLowerCase() === cleanWord.toLowerCase()
                            );
                            
                            if (cleanWord.length < 3) return null; // Skip short words
                            
                            return (
                              <button
                                key={index}
                                type="button"
                                onClick={() => handleHighlightToggle(cleanWord)}
                                className={`px-2 py-1 text-xs rounded-md border transition-colors ${
                                  isHighlighted
                                    ? 'bg-purple-100 text-purple-700 border-purple-300'
                                    : 'bg-slate-100 text-slate-600 border-slate-300 hover:bg-slate-200'
                                }`}
                              >
                                {cleanWord}
                              </button>
                            );
                          })}
                        </div>
                        {pageContent.hero.headlineHighlights && pageContent.hero.headlineHighlights.length > 0 && (
                          <div className="mt-2 text-xs text-slate-500">
                            Highlighted: {pageContent.hero.headlineHighlights.join(', ')}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                  <div>
                    <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Subheadline</label>
                    <textarea
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                      value={pageContent.hero.subheadline}
                      onChange={e => {
                        handleHeroChange("subheadline", e.target.value);
                        // Auto-resize
                        e.target.style.height = 'auto';
                        e.target.style.height = e.target.scrollHeight + 'px';
                      }}
                      onInput={e => {
                        // Auto-resize on input
                        const target = e.target as HTMLTextAreaElement;
                        target.style.height = 'auto';
                        target.style.height = target.scrollHeight + 'px';
                      }}
                      rows={1}
                      placeholder="Enter your subheadline..."
                    />
                  </div>
                  <div>
                    <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Call to Action</label>
                    <textarea
                      className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                      value={pageContent.hero.cta}
                      onChange={e => {
                        handleHeroChange("cta", e.target.value);
                        // Auto-resize
                        e.target.style.height = 'auto';
                        e.target.style.height = e.target.scrollHeight + 'px';
                      }}
                      onInput={e => {
                        // Auto-resize on input
                        const target = e.target as HTMLTextAreaElement;
                        target.style.height = 'auto';
                        target.style.height = target.scrollHeight + 'px';
                      }}
                      rows={1}
                      placeholder="Enter your call to action..."
                    />
                  </div>
                </div>
              )}
            </div>

            {/* Page Headings Section */}
            <div className="border border-slate-200 rounded-lg overflow-hidden">
              <button
                onClick={() => toggleSection('pageHeadings')}
                className="w-full px-4 py-3 bg-slate-50 hover:bg-slate-100 transition-colors flex items-center justify-between text-left"
              >
                <h3 className="text-base sm:text-lg font-semibold text-slate-800">Page Headings</h3>
                <svg 
                  className={`w-5 h-5 text-slate-600 transition-transform duration-200 ${expandedSections.pageHeadings ? 'rotate-180' : ''}`}
                  fill="none" 
                  stroke="currentColor" 
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              {expandedSections.pageHeadings && (
                <div className="p-4 space-y-3">
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Features Section Title</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.featuresTitle || ''}
                    onChange={e => {
                      handlePageContentChange("featuresTitle", e.target.value);
                      // Auto-resize
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      // Auto-resize on input
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={1}
                    placeholder="Powerful Features"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Features Section Subtitle</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.featuresSubtitle || ''}
                    onChange={e => {
                      handlePageContentChange("featuresSubtitle", e.target.value);
                      // Auto-resize
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      // Auto-resize on input
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={2}
                    placeholder="Everything you need to build, deploy, and scale your applications with confidence."
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">CTA Section Title</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.ctaTitle || ''}
                    onChange={e => {
                      handlePageContentChange("ctaTitle", e.target.value);
                      // Auto-resize
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      // Auto-resize on input
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={1}
                    placeholder="Ready to Get Started?"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">CTA Section Subtitle</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.ctaSubtitle || ''}
                    onChange={e => {
                      handlePageContentChange("ctaSubtitle", e.target.value);
                      // Auto-resize
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      // Auto-resize on input
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={2}
                    placeholder="Join thousands of users who are already building amazing things with our platform."
                  />
                </div>
              </div>
            </div>
              )}
            </div>

            {/* Features Section */}
          <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">Features</h3>
              <div className="space-y-3">
            {pageContent.features.map((feature: any, idx: number) => (
                  <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                    <div className="space-y-2">
                      <textarea
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                  placeholder="Feature Title"
                  value={feature.title}
                        onChange={e => {
                          handleFeatureChange(idx, { ...feature, title: e.target.value });
                          // Auto-resize
                          e.target.style.height = 'auto';
                          e.target.style.height = e.target.scrollHeight + 'px';
                        }}
                        onInput={e => {
                          // Auto-resize on input
                          const target = e.target as HTMLTextAreaElement;
                          target.style.height = 'auto';
                          target.style.height = target.scrollHeight + 'px';
                        }}
                        rows={1}
                      />
                      <textarea
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                  placeholder="Feature Description"
                  value={feature.description}
                        onChange={e => {
                          handleFeatureChange(idx, { ...feature, description: e.target.value });
                          // Auto-resize
                          e.target.style.height = 'auto';
                          e.target.style.height = e.target.scrollHeight + 'px';
                        }}
                        onInput={e => {
                          // Auto-resize on input
                          const target = e.target as HTMLTextAreaElement;
                          target.style.height = 'auto';
                          target.style.height = target.scrollHeight + 'px';
                        }}
                        rows={2}
                />
                <button
                  type="button"
                        className="text-xs text-red-500 hover:text-red-700 transition-colors"
                  onClick={() => handleRemoveFeature(idx)}
                      >
                        Remove Feature
                      </button>
                    </div>
              </div>
            ))}
            <button
              type="button"
                  className="w-full px-3 py-2 text-xs sm:text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
              onClick={handleAddFeature}
                >
                  + Add Feature
                </button>
              </div>
          </div>

            {/* Problem Section */}
            <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">Problem Section</h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Title</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.problemSection?.title || ''}
                    onChange={e => {
                      handleProblemSectionChange("title", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={1}
                    placeholder="The Problem"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Subtitle</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.problemSection?.subtitle || ''}
                    onChange={e => {
                      handleProblemSectionChange("subtitle", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={2}
                    placeholder="Are you struggling with these common challenges?"
                  />
                </div>
                
                {/* Pain Points */}
                <div>
                  <label className="block text-slate-700 font-medium mb-2 text-xs sm:text-sm">Pain Points</label>
                  <div className="space-y-2">
                    {(pageContent.problemSection?.painPoints || []).map((painPoint: any, idx: number) => (
                      <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                        <div className="space-y-2">
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Pain point description"
                            value={painPoint.text}
                            onChange={e => {
                              handlePainPointsChange(idx, { ...painPoint, text: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={2}
                          />
                          <button
                            type="button"
                            className="text-xs text-red-500 hover:text-red-700 transition-colors"
                            onClick={() => handleRemovePainPoint(idx)}
                          >
                            Remove Pain Point
                          </button>
                        </div>
                      </div>
                    ))}
                    <button
                      type="button"
                      className="w-full px-3 py-2 text-xs sm:text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
                      onClick={handleAddPainPoint}
                    >
                      + Add Pain Point
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Solution Section */}
            <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">Solution Section</h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Title</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.solutionSection?.title || ''}
                    onChange={e => {
                      handleSolutionSectionChange("title", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={1}
                    placeholder="The Solution"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Subtitle</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.solutionSection?.subtitle || ''}
                    onChange={e => {
                      handleSolutionSectionChange("subtitle", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={2}
                    placeholder="Here's how we solve your problems"
                  />
                </div>
                
                {/* Benefits */}
                <div>
                  <label className="block text-slate-700 font-medium mb-2 text-xs sm:text-sm">Benefits (NESB Framework)</label>
                  <div className="space-y-2">
                    {(pageContent.solutionSection?.benefits || []).map((benefit: any, idx: number) => (
                      <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                        <div className="space-y-2">
                          <div className="flex gap-2">
                            <select
                              className="px-2 py-1 border border-slate-300 rounded text-xs"
                              value={benefit.type || 'new'}
                              onChange={e => handleBenefitsChange(idx, { ...benefit, type: e.target.value })}
                            >
                              <option value="new">NEW</option>
                              <option value="easy">EASY</option>
                              <option value="safe">SAFE</option>
                              <option value="big">BIG</option>
                            </select>
                          </div>
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Benefit title"
                            value={benefit.title}
                            onChange={e => {
                              handleBenefitsChange(idx, { ...benefit, title: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={1}
                          />
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Benefit description"
                            value={benefit.description}
                            onChange={e => {
                              handleBenefitsChange(idx, { ...benefit, description: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={2}
                          />
                          <button
                            type="button"
                            className="text-xs text-red-500 hover:text-red-700 transition-colors"
                            onClick={() => handleRemoveBenefit(idx)}
                          >
                            Remove Benefit
                          </button>
                        </div>
                      </div>
                    ))}
                    <button
                      type="button"
                      className="w-full px-3 py-2 text-xs sm:text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
                      onClick={handleAddBenefit}
                    >
                      + Add Benefit
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Social Proof Section */}
            <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">Social Proof</h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Title</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.socialProof?.title || ''}
                    onChange={e => {
                      handleSocialProofChange("title", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={1}
                    placeholder="What Our Customers Say"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Subtitle</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.socialProof?.subtitle || ''}
                    onChange={e => {
                      handleSocialProofChange("subtitle", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={2}
                    placeholder="Join thousands of satisfied customers"
                  />
                </div>
                
                {/* Stats */}
                <div>
                  <label className="block text-slate-700 font-medium mb-2 text-xs sm:text-sm">Statistics</label>
                  <div className="space-y-2">
                    {(pageContent.socialProof?.stats || []).map((stat: any, idx: number) => (
                      <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                        <div className="space-y-2">
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                            placeholder="Number (e.g., 10,000+)"
                            value={stat.number}
                            onChange={e => handleStatsChange(idx, { ...stat, number: e.target.value })}
                          />
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                            placeholder="Label (e.g., Happy Customers)"
                            value={stat.label}
                            onChange={e => handleStatsChange(idx, { ...stat, label: e.target.value })}
                          />
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Description"
                            value={stat.description}
                            onChange={e => {
                              handleStatsChange(idx, { ...stat, description: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={2}
                          />
                          <button
                            type="button"
                            className="text-xs text-red-500 hover:text-red-700 transition-colors"
                            onClick={() => handleRemoveStat(idx)}
                          >
                            Remove Stat
                          </button>
                        </div>
                      </div>
                    ))}
                    <button
                      type="button"
                      className="w-full px-3 py-2 text-xs sm:text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
                      onClick={handleAddStat}
                    >
                      + Add Statistic
                    </button>
                  </div>
                </div>
                
                {/* Testimonials */}
                <div>
                  <label className="block text-slate-700 font-medium mb-2 text-xs sm:text-sm">Testimonials</label>
                  <div className="space-y-2">
                    {(pageContent.socialProof?.testimonials || []).map((testimonial: any, idx: number) => (
                      <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                        <div className="space-y-2">
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Customer quote"
                            value={testimonial.quote}
                            onChange={e => {
                              handleTestimonialsChange(idx, { ...testimonial, quote: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={3}
                          />
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                            placeholder="Customer name"
                            value={testimonial.name}
                            onChange={e => handleTestimonialsChange(idx, { ...testimonial, name: e.target.value })}
                          />
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                            placeholder="Role"
                            value={testimonial.role}
                            onChange={e => handleTestimonialsChange(idx, { ...testimonial, role: e.target.value })}
                          />
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                            placeholder="Company"
                            value={testimonial.company}
                            onChange={e => handleTestimonialsChange(idx, { ...testimonial, company: e.target.value })}
                          />
                          <input
                            type="text"
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                            placeholder="Result (e.g., Increased sales by 300%)"
                            value={testimonial.result}
                            onChange={e => handleTestimonialsChange(idx, { ...testimonial, result: e.target.value })}
                          />
                          <button
                            type="button"
                            className="text-xs text-red-500 hover:text-red-700 transition-colors"
                            onClick={() => handleRemoveTestimonial(idx)}
                          >
                            Remove Testimonial
                          </button>
                        </div>
                      </div>
                    ))}
                    <button
                      type="button"
                      className="w-full px-3 py-2 text-xs sm:text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
                      onClick={handleAddTestimonial}
                    >
                      + Add Testimonial
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Guarantees Section */}
            <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">Guarantees</h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Title</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.guarantees?.title || ''}
                    onChange={e => {
                      handleGuaranteesChange("title", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={1}
                    placeholder="Our Guarantees"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Subtitle</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.guarantees?.subtitle || ''}
                    onChange={e => {
                      handleGuaranteesChange("subtitle", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={2}
                    placeholder="We're confident you'll love our solution"
                  />
                </div>
                
                {/* Guarantees */}
                <div>
                  <label className="block text-slate-700 font-medium mb-2 text-xs sm:text-sm">Guarantees</label>
                  <div className="space-y-2">
                    {(pageContent.guarantees?.guarantees || []).map((guarantee: any, idx: number) => (
                      <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                        <div className="space-y-2">
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Guarantee title"
                            value={guarantee.title}
                            onChange={e => {
                              handleGuaranteesArrayChange(idx, { ...guarantee, title: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={1}
                          />
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Guarantee description"
                            value={guarantee.description}
                            onChange={e => {
                              handleGuaranteesArrayChange(idx, { ...guarantee, description: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={2}
                          />
                          <button
                            type="button"
                            className="text-xs text-red-500 hover:text-red-700 transition-colors"
                            onClick={() => handleRemoveGuarantee(idx)}
                          >
                            Remove Guarantee
                          </button>
                        </div>
                      </div>
                    ))}
                    <button
                      type="button"
                      className="w-full px-3 py-2 text-xs sm:text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
                      onClick={handleAddGuarantee}
                    >
                      + Add Guarantee
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* FAQ Section */}
            <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">FAQ</h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Title</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.faq?.title || ''}
                    onChange={e => {
                      handleFAQChange("title", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={1}
                    placeholder="Frequently Asked Questions"
                  />
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Section Subtitle</label>
                  <textarea
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                    value={pageContent.faq?.subtitle || ''}
                    onChange={e => {
                      handleFAQChange("subtitle", e.target.value);
                      e.target.style.height = 'auto';
                      e.target.style.height = e.target.scrollHeight + 'px';
                    }}
                    onInput={e => {
                      const target = e.target as HTMLTextAreaElement;
                      target.style.height = 'auto';
                      target.style.height = target.scrollHeight + 'px';
                    }}
                    rows={2}
                    placeholder="Everything you need to know"
                  />
                </div>
                
                {/* FAQ Questions */}
                <div>
                  <label className="block text-slate-700 font-medium mb-2 text-xs sm:text-sm">Questions</label>
                  <div className="space-y-2">
                    {(pageContent.faq?.questions || []).map((faq: any, idx: number) => (
                      <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                        <div className="space-y-2">
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Question"
                            value={faq.question}
                            onChange={e => {
                              handleQuestionsChange(idx, { ...faq, question: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={2}
                          />
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                            placeholder="Answer"
                            value={faq.answer}
                            onChange={e => {
                              handleQuestionsChange(idx, { ...faq, answer: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={3}
                          />
                          <button
                            type="button"
                            className="text-xs text-red-500 hover:text-red-700 transition-colors"
                            onClick={() => handleRemoveQuestion(idx)}
                          >
                            Remove Question
                          </button>
                        </div>
                      </div>
                    ))}
                    <button
                      type="button"
                      className="w-full px-3 py-2 text-xs sm:text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
                      onClick={handleAddQuestion}
                    >
                      + Add Question
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Urgency Settings */}
            <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">Urgency Settings</h3>
              <div className="space-y-3">
                <div>
                  <label className="flex items-center gap-2 text-slate-700 font-medium mb-1 text-xs sm:text-sm">
                    <input
                      type="checkbox"
                      checked={pageContent.urgency?.enabled || false}
                      onChange={e => handleUrgencyChange("enabled", e.target.checked)}
                      className="rounded border-slate-300 text-purple-600 focus:ring-purple-500"
                    />
                    Enable Urgency Banner
                  </label>
                </div>
                {pageContent.urgency?.enabled && (
                  <>
                    <div>
                      <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Urgency Message</label>
                      <textarea
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm resize-none overflow-hidden"
                        value={pageContent.urgency?.message || ''}
                        onChange={e => {
                          handleUrgencyChange("message", e.target.value);
                          e.target.style.height = 'auto';
                          e.target.style.height = e.target.scrollHeight + 'px';
                        }}
                        onInput={e => {
                          const target = e.target as HTMLTextAreaElement;
                          target.style.height = 'auto';
                          target.style.height = target.scrollHeight + 'px';
                        }}
                        rows={1}
                        placeholder="Limited Time Offer"
                      />
                    </div>
                    <div>
                      <label className="block text-slate-700 font-medium mb-1 text-xs sm:text-sm">Deadline</label>
                      <input
                        type="text"
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                        value={pageContent.urgency?.deadline || ''}
                        onChange={e => handleUrgencyChange("deadline", e.target.value)}
                        placeholder="Ends in 24 hours"
                      />
                    </div>
                  </>
                )}
              </div>
            </div>

            {/* Theme Settings */}
            <div>
              <h3 className="text-base sm:text-lg font-semibold text-slate-800 mb-3 sm:mb-4">Theme Settings</h3>
              <div className="space-y-3">
                <div>
                  <label className="block text-slate-700 font-medium mb-1 sm:mb-2 text-xs sm:text-sm">Theme Mode</label>
                  <select
                    className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-xs sm:text-sm"
                    value={pageStyle.theme?.mode || 'white'}
                    onChange={e => handleThemeChange("mode", e.target.value)}
                  >
                    <option value="white">Light Theme</option>
                    <option value="black">Dark Theme</option>
                  </select>
                </div>
                <div>
                  <label className="block text-slate-700 font-medium mb-1 sm:mb-2 text-xs sm:text-sm">Accent Color</label>
              <input
                type="color"
                    value={pageStyle.theme?.accentColor || '#6366f1'}
                    onChange={e => handleThemeChange("accentColor", e.target.value)}
                    className="w-full h-8 sm:h-10 p-0 border border-slate-300 rounded-lg cursor-pointer"
                  />
                  <p className="text-xs text-slate-500 mt-1">
                    This color will be used for buttons, icons, and highlights
                  </p>
                </div>
              </div>
            </div>

            {/* Error/Success Messages */}
            {error && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                <div className="text-red-600 text-xs sm:text-sm">{error}</div>
              </div>
            )}
            {published && (
              <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                <div className="text-green-600 text-xs sm:text-sm">Landing page published!</div>
              </div>
            )}
          </div>
        </div>

        {/* Collapsed State Icons */}
        {sidePanelCollapsed && (
          <div className="flex-1 flex flex-col items-center py-4">
            <button
              onClick={() => setSidePanelCollapsed(false)}
              className="p-2 rounded-lg hover:bg-slate-100 transition-colors"
              title="Expand editor"
            >
              <svg className="w-5 h-5 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
          </div>
        )}
      </aside>

      {/* Mobile Side Panel Overlay */}
      {showSidePanel && (
        <div className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40" onClick={() => setShowSidePanel(false)}>
          <div className="fixed right-0 top-0 h-full w-80 max-w-[90vw] bg-white shadow-xl border-l border-slate-200 flex flex-col z-50" onClick={e => e.stopPropagation()}>
            {/* Mobile Panel Header */}
            <div className="flex items-center justify-between px-4 py-4 border-b border-slate-100 flex-shrink-0">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-lg flex items-center justify-center">
                  <span className="text-white font-bold text-sm">✏️</span>
                </div>
                <span className="font-semibold text-slate-800">Edit Page</span>
              </div>
              <button
                onClick={() => setShowSidePanel(false)}
                className="p-2 rounded-lg hover:bg-slate-100 transition-colors"
              >
                <svg className="w-5 h-5 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            {/* Mobile Panel Content */}
            <div className="flex-1 overflow-y-auto" style={{ minHeight: 0 }}>
              <div className="p-4 space-y-6 pb-6">
                {/* Hero Section */}
                <div>
                  <h3 className="text-lg font-semibold text-slate-800 mb-4">Hero Section</h3>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-slate-700 font-medium mb-1 text-sm">Headline</label>
                      <textarea
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm resize-none overflow-hidden"
                        value={pageContent.hero.headline}
                        onChange={e => {
                          handleHeroChange("headline", e.target.value);
                          e.target.style.height = 'auto';
                          e.target.style.height = e.target.scrollHeight + 'px';
                        }}
                        onInput={e => {
                          const target = e.target as HTMLTextAreaElement;
                          target.style.height = 'auto';
                          target.style.height = target.scrollHeight + 'px';
                        }}
                        rows={1}
                        placeholder="Enter your headline..."
              />
            </div>
            <div>
                      <label className="block text-slate-700 font-medium mb-1 text-sm">Subheadline</label>
                      <textarea
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm resize-none overflow-hidden"
                        value={pageContent.hero.subheadline}
                        onChange={e => {
                          handleHeroChange("subheadline", e.target.value);
                          e.target.style.height = 'auto';
                          e.target.style.height = e.target.scrollHeight + 'px';
                        }}
                        onInput={e => {
                          const target = e.target as HTMLTextAreaElement;
                          target.style.height = 'auto';
                          target.style.height = target.scrollHeight + 'px';
                        }}
                        rows={1}
                        placeholder="Enter your subheadline..."
              />
            </div>
            <div>
                      <label className="block text-slate-700 font-medium mb-1 text-sm">Call to Action</label>
                      <textarea
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm resize-none overflow-hidden"
                        value={pageContent.hero.cta}
                        onChange={e => {
                          handleHeroChange("cta", e.target.value);
                          e.target.style.height = 'auto';
                          e.target.style.height = e.target.scrollHeight + 'px';
                        }}
                        onInput={e => {
                          const target = e.target as HTMLTextAreaElement;
                          target.style.height = 'auto';
                          target.style.height = target.scrollHeight + 'px';
                        }}
                        rows={1}
                        placeholder="Enter your call to action..."
              />
            </div>
          </div>
        </div>

                {/* Features Section */}
                <div>
                  <h3 className="text-lg font-semibold text-slate-800 mb-4">Features</h3>
                  <div className="space-y-3">
                    {pageContent.features.map((feature: any, idx: number) => (
                      <div key={idx} className="p-3 bg-slate-50 rounded-lg border border-slate-200">
                        <div className="space-y-2">
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm resize-none overflow-hidden"
                            placeholder="Feature Title"
                            value={feature.title}
                            onChange={e => {
                              handleFeatureChange(idx, { ...feature, title: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={1}
                          />
                          <textarea
                            className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm resize-none overflow-hidden"
                            placeholder="Feature Description"
                            value={feature.description}
                            onChange={e => {
                              handleFeatureChange(idx, { ...feature, description: e.target.value });
                              e.target.style.height = 'auto';
                              e.target.style.height = e.target.scrollHeight + 'px';
                            }}
                            onInput={e => {
                              const target = e.target as HTMLTextAreaElement;
                              target.style.height = 'auto';
                              target.style.height = target.scrollHeight + 'px';
                            }}
                            rows={2}
                          />
          <button
                            type="button"
                            className="text-xs text-red-500 hover:text-red-700 transition-colors"
                            onClick={() => handleRemoveFeature(idx)}
                          >
                            Remove Feature
          </button>
                        </div>
                      </div>
                    ))}
          <button
                      type="button"
                      className="w-full px-3 py-2 text-sm text-purple-600 border border-purple-300 rounded-lg hover:bg-purple-50 transition-colors"
                      onClick={handleAddFeature}
                    >
                      + Add Feature
          </button>
        </div>
      </div>

                {/* Theme Settings */}
                <div>
                  <h3 className="text-lg font-semibold text-slate-800 mb-4">Theme Settings</h3>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-slate-700 font-medium mb-2 text-sm">Theme Mode</label>
                      <select
                        className="w-full px-3 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm"
                        value={pageStyle.theme?.mode || 'white'}
                        onChange={e => handleThemeChange("mode", e.target.value)}
                      >
                        <option value="white">Light Theme</option>
                        <option value="black">Dark Theme</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-slate-700 font-medium mb-2 text-sm">Accent Color</label>
                      <input
                        type="color"
                        value={pageStyle.theme?.accentColor || '#6366f1'}
                        onChange={e => handleThemeChange("accentColor", e.target.value)}
                        className="w-full h-10 p-0 border border-slate-300 rounded-lg cursor-pointer"
                      />
                      <p className="text-xs text-slate-500 mt-1">
                        This color will be used for buttons, icons, and highlights
                      </p>
                    </div>
                  </div>
                </div>

                {/* Error/Success Messages */}
                {error && (
                  <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                    <div className="text-red-600 text-sm">{error}</div>
                  </div>
                )}
                {published && (
                  <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                    <div className="text-green-600 text-sm">Landing page published!</div>
                  </div>
                )}
              </div>
            </div>
          </div>
      </div>
      )}
    </div>
  );
} 